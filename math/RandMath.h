#ifndef RANDMATH_H
#define RANDMATH_H

#include <QtMath>
#include <cmath>
#include "randlib_global.h"
#include <functional>
#include <QDebug>

#ifndef INFINITY
#include <limits>
static double INFINITY = std::numeric_limits<double>::infinity();
#endif

#ifndef NAN
#include <limits>
static double NAN = std::numeric_limits<double>::quiet_NaN();
#endif

constexpr double M_1_E       = 0.36787944117144232160;
constexpr double M_SQRT3     = 1.73205080756887729353;
constexpr double M_SQRTPI    = 1.77245385090551602730;
constexpr double M_SQRT2PI   = 2.50662827463100050242;
constexpr double M_1_SQRTPI  = 0.56418958354775628695;
constexpr double M_1_SQRT2PI = 0.39894228040143267794;

constexpr double MIN_POSITIVE = 1e-21;

#define SWAP(a, b) (((a) += (b)), ((b) -= (a)), ((a) += (b)), ((b) = -(b)))

/**
 * @brief The RandMath class
 */
class RANDLIBSHARED_EXPORT RandMath
{
public:
    RandMath();

private:
    static constexpr long double factorialTable[] =
    {
        1,
        3628800,
        2432902008176640000,
        265252859812191058636308480000000.,
        815915283247897734345611269596115894272000000000.,
        30414093201713378043612608166064768844377641568960512000000000000.,
        8320987112741390144276341183223364380754172606361245952449277696409600000000000000.,
        11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000.,
        71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000.,
        1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000.,
        93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000.,
        15882455415227429404253703127090772871724410234473563207581748318444567162948183030959960131517678520479243672638179990208521148623422266876757623911219200000000000000000000000000.,
        6689502913449127057588118054090372586752746333138029810295671352301633557244962989366874165271984981308157637893214090552534408589408121859898481114389650005964960521256960000000000000000000000000000.,
        6466855489220473672507304395536485253155359447828049608975952322944781961185526165512707047229268452925683969240398027149120740074042105844737747799459310029635780991774612983803150965145600000000000000000000000000000000.,
        13462012475717524605876073858941615558355851148193967190051391468057460367090535696797920946629681836680869097041958983702264048370902871114013579941370766400374327741701139895604871545254810788060989321379840000000000000000000000000000000000.,
        57133839564458545904789328652610540031895535786011264182548375833179829124845398393126574488675311145377107878746854204162666250198684504466355949195922066574942592095735778929325357290444962472405416790722118445437122269675520000000000000000000000000000000000000.,
        471472363599206132240694321176194377951192623045460204976904578317542573467421580346978030238114995699562728104819596262106947389303901748942909887857509625114880781313585012959529941660203611234871833992565791817698209861793313332044734813700096000000000000000000000000000000000000000.,
        7257415615307998967396728211129263114716991681296451376543577798900561843401706157852350749242617459511490991237838520776666022565442753025328900773207510902400430280058295603966612599658257104398558294257568966313439612262571094946806711205568880457193340212661452800000000000000000000000000000000000000000.,
        200896062499134299656951336898466838917540340798867777940435335160044860953395980941180138112097309735631594101037399609671032132186331495273609598531966730972945653558819806475064353856858157445040809209560358463319644664891114256430017824141796753818192338642302693327818731986039603200000000000000000000000000000000000000000000.l,
        9680322675255249156123346514615331205418161260462873360750859919944104623425228207640470674933540169424682360525991982916161596983449594045525553704253602287443197783274656957056546338783001340434094795097553229620273057440272298773179365935914105128629426348958748638226084106818484328004851174161755668480000000000000000000000000000000000000000000000.l,
        788657867364790503552363213932185062295135977687173263294742533244359449963403342920304284011984623904177212138919638830257642790242637105061926624952829931113462857270763317237396988943922445621451664240254033291864131227428294853277524242407573903240321257405579568660226031904170324062351700858796178922222789623703897374720000000000000000000000000000000000000000000000000.l,
        105823620292236563784274284243348353057589905787169019562352737522144487532400210147849369011714673954768265316577892528273760626189481169051055226066650741189573897273684791411180134039439160066561895838501000817711682625725670477616267598661259194975646029749546282594356217374097544153589482020891750774735012558313460846824864172030239122128896000000000000000000000000000000000000000000000000000.l,
        22838603359146414573972658651153337270429730715462287017736347161260276926030248458777765497919211029457065581960747795750095505232241970499561769723020565876672261660609763234049775547325430135571331468257475537994508495233770658945310210552725163342784668756149049213658078338458534285571551800849578848226429898670032945513859929938621783523490272646966918544936140800000000000000000000000000000000000000000000000000000.l,
        7758587304686725201813174298892781442413952130995533365303964524344944412641389739603152000644515957408814002319492032321234250506968028455594445689972313374305301019340949789291189972149450405025159624155827152329676580440959428615802893638146558163235483142136540783687811997927615346859658417205832954125915861983307177232587595821512723429698627780530255874167602077755356592824804966400000000000000000000000000000000000000000000000000000000.l,
        4067885363647058120493575921486885310172051259182827146069755969081486918925585104009100729728348522923820890245870098659147156051905732563147381599098459244752463027688115705371704628286326621238456543307267608612545168337779669138759451760395968217423617954330737034164596496963986817722252221059768080852489940995605579171999666916004042965293896799800598079985264195119506681577622056215044851618236292136960000000000000000000000000000000000000000000000000000000000.l,
        3232856260909107732320814552024368470994843717673780666747942427112823747555111209488817915371028199450928507353189432926730931712808990822791030279071281921676527240189264733218041186261006832925365133678939089569935713530175040513178760077247933065402339006164825552248819436572586057399222641254832982204849137721776650641276858807153128978777672951913990844377478702589172973255150283241787320658188482062478582659808848825548800000000000000000000000000000000000000000000000000000000000000.l,
    };

    static constexpr double logFactorialTable[] =
    {
        // TODO: MAKE TABLE MORE PRECISE
        0.693147180559945, 1.791759469228055, 3.178053830347946, 4.787491742782046, 6.579251212010101, 8.525161361065415, 10.604602902745251, 12.801827480081469, 15.104412573075516,
        17.502307845873887, 19.987214495661885, 22.552163853123421, 25.191221182738683, 27.899271383840894, 30.671860106080675, 33.505073450136891, 36.395445208033053, 39.339884187199495,
        42.335616460753485, 45.380138898476908, 48.471181351835227, 51.606675567764377, 54.784729398112319, 58.003605222980518, 61.261701761002001, 64.557538627006323, 67.889743137181526,
        71.257038967168000, 74.658236348830158, 78.092223553315307, 81.557959456115029, 85.054467017581516, 88.580827542197682, 92.136175603687079, 95.719694542143202, 99.330612454787428,
        102.968198614513810, 106.631760260643450, 110.320639714757390, 114.034211781461690, 117.771881399745060, 121.533081515438640, 125.317271149356880, 129.123933639127240, 132.952575035616290,
        136.802722637326350, 140.673923648234250, 144.565743946344900, 148.477766951773020, 152.409592584497350, 156.360836303078800, 160.331128216630930, 164.320112263195170, 168.327445448427650,
        172.352797139162820, 176.395848406997370, 180.456291417543780, 184.533828861449510, 188.628173423671600, 192.739047287844900, 196.866181672889980, 201.009316399281570, 205.168199482641200,
        209.342586752536820, 213.532241494563270, 217.736934113954250, 221.956441819130360, 226.190548323727570, 230.439043565776930, 234.701723442818260, 238.978389561834350, 243.268849002982730,
        247.572914096186910, 251.890402209723190, 256.221135550009480, 260.564940971863220, 264.921649798552780, 269.291097651019810, 273.673124285693690, 278.067573440366120, 282.474292687630400,
        286.893133295426990, 291.323950094270290, 295.766601350760600, 300.220948647014100, 304.686856765668720, 309.164193580146900, 313.652829949878990, 318.152639620209300, 322.663499126726210,
        327.185287703775200, 331.717887196928470, 336.261181979198450, 340.815058870798960, 345.379407062266860, 349.954118040770250, 354.539085519440790, 359.134205369575340, 363.739375555563470,
        368.354496072404690, 372.979468885689020, 377.614197873918670, 382.258588773060010, 386.912549123217560, 391.575988217329610, 396.248817051791490, 400.930948278915760, 405.622296161144900,
        410.322776526937280, 415.032306728249580, 419.750805599544780, 424.478193418257090, 429.214391866651570, 433.959323995014870, 438.712914186121170, 443.475088120918940, 448.245772745384610,
        453.024896238496130, 457.812387981278110, 462.608178526874890, 467.412199571608080, 472.224383926980520, 477.044665492585580, 481.872979229887900, 486.709261136839360, 491.553448223298010,
        496.405478487217580, 501.265290891579240, 506.132825342034830, 511.008022665236070, 515.890824587822520, 520.781173716044240, 525.679013515995050, 530.584288294433580, 535.496943180169520,
        540.416924105997740, 545.344177791154950, 550.278651724285620, 555.220294146894960, 560.169054037273100, 565.124881094874350, 570.087725725134190, 575.057539024710200, 580.034272767130800,
        585.017879388839220, 590.008311975617860, 595.005524249382010, 600.009470555327430, 605.020105849423770, 610.037385686238740, 615.061266207084940, 620.091704128477430, 625.128656730891070,
        630.172081847810200, 635.221937855059760, 640.278183660408100, 645.340778693435030, 650.409682895655240, 655.484856710889060, 660.566261075873510, 665.653857411105950, 670.747607611912710,
        675.847474039736880, 680.953419513637530, 686.065407301994010, 691.183401114410800, 696.307365093814040, 701.437263808737160, 706.573062245787470, 711.714725802289990, 716.862220279103440,
        722.015511873601330, 727.174567172815840, 732.339353146739310, 737.509837141777440, 742.685986874351220, 747.867770424643370, 753.055156230484160, 758.248113081374300, 763.446610112640200,
        768.650616799717000, 773.860102952558460, 779.075038710167410, 784.295394535245690, 789.521141208958970, 794.752249825813460, 799.988691788643450, 805.230438803703120, 810.477462875863580,
        815.729736303910160, 820.987231675937890, 826.249921864842800, 831.517780023906310, 836.790779582469900, 842.068894241700490, 847.352097970438420, 852.640365001133090, 857.933669825857460,
        863.231987192405430, 868.535292100464630, 873.843559797865740, 879.156765776907600, 884.474885770751830, 889.797895749890240, 895.125771918679900, 900.458490711945270, 905.796028791646340,
        911.138363043611210, 916.485470574328820, 921.837328707804890, 927.193914982476710, 932.555207148186240, 937.921183163208070, 943.291821191335660, 948.667099599019820, 954.046996952560450,
        959.431492015349480, 964.820563745165940, 970.214191291518320, 975.612353993036210, 981.015031374908400, 986.422203146368590, 991.833849198223450, 997.249949600427840, 1002.670484599700300,
        1008.095434617181700, 1013.524780246136200, 1018.958502249690200, 1024.396581558613400, 1029.838999269135500, 1035.285736640801600, 1040.736775094367400, 1046.192096209724900, 1051.651681723869200,
        1057.115513528895000, 1062.583573670030100, 1068.055844343701400, 1073.532307895632800, 1079.012946818975000, 1084.497743752465600, 1089.986681478622400, 1095.479742921962700, 1100.976911147256000,
        1106.478169357800900, 1111.983500893733000, 1117.492889230361000, 1123.006317976526100, 1128.523770872990800, 1134.045231790853000, 1139.570684729984800, 1145.100113817496100, 1150.633503306223700,
        1156.170837573242400, 1161.712101118400651
    };

    /**
     * @brief stirlingFactorial
     * @param n integer number
     * @return n! according to Moivre-Stirling formula
     */
    static long double stirlingFactorial(int n);

    /**
     * @brief stirlingLogFactorial
     * @param n integer number
     * @return log(n!) according to Moivre-Stirling formula
     */
    static long double stirlingLogFactorial(int n);
public:
    /**
     * @brief fastFactorial
     * Calculate n! using table values for small n <= 255
     * and Moivre-Stirling formula for large n > 255
     * @param n integer number
     * @return n!
     */
    static long double factorial(int n);

    /**
     * @brief fastLogFactorial
     * Calculate log(n!) using table values for small n <= 254
     * and approximate formula for large n > 254
     * @param n integer number
     * @return
     */
    static long double logFactorial(int n);

    /**
     * @brief doubleFactorial
     * Calculate n!!
     * @param n
     * @return
     */
    static long double doubleFactorial(int n);

    /**
     * @brief binomialCoef
     * Calculate binomial coefficient C(n,k)
     * @param n
     * @param k
     * @return C(n,k) = n! / (k! * (n - k)!)
     */
    static long double binomialCoef(int n, int k);

    /**
     * @brief lowerIncGamma
     * Calculate lower incomplete gamma function
     * @param a
     * @param x
     * @return
     */
    static long double lowerIncGamma(double a, double x);

    /**
     * @brief upperIncGamma
     * Calculate upper incomplete gamma function
     * @param a
     * @param x
     * @return
     */
    static long double upperIncGamma(double a, double x);

    /**
     * @brief betaFun
     * Calculate Beta function
     * @param x
     * @param y
     * @return Gamma(x) * Gamma(y) / Gamma(x + y)
     */
    static long double betaFun(double x, double y);

    /**
     * @brief gammaHalf
     * Calculate Gamma function of half integer: gamma(k/2)
     * @param k
     * @return
     */
    static long double gammaHalf(int k);

    /**
     * @brief erfInv
     * @param p
     * @return inversed error function
     */
    static long double erfInv(double p);

    /**
     * @brief erfcinv
     * @param p
     * @return inversed additional error function
     */
    static long double erfcinv(double p);

private:

    /**
     * @brief adaptiveSimpsonsAux
     * auxiliary function for calculation of integral
     * @param funPtr
     * @param a lower boundary
     * @param b upper boundary
     * @param epsilon
     * @param S
     * @param fa
     * @param fb
     * @param fc
     * @param bottom
     * @return
     */
    static long double adaptiveSimpsonsAux(const std::function<double (double)> &funPtr, double a, double b,
                                           double epsilon, double S, double fa, double fb, double fc, int bottom);

public:

    /**
     * @brief integral
     * @param funPtr integrand
     * @param a lower boundary
     * @param b upper boundary
     * @param epsilon tolerance
     * @param maxRecursionDepth how deep should the algorithm go
     * @return
     */
    static long double integral(const std::function<double (double)> funPtr, double a, double b,
                                double epsilon = 1e-10, int maxRecursionDepth = 10);


    /**
     * @brief findRoot
     * Brent's root-finding procedure
     * @param funPtr
     * @param a lower boundary
     * @param b upper boundary
     * @param root such var as funPtr(var) = 0
     * @param epsilon tolerance
     * @return true if success, false otherwise
     */
    static bool findRoot(const std::function<double (double)> &funPtr, double a, double b, double & root,
                         double epsilon = 1e-10);

    /**
     * @brief linearInterpolation
     * @param a left boundary
     * @param b right boundary
     * @param fa is equal to f(a)
     * @param fb is qual to f(b)
     * @param x the interpolated function parameter
     * @return f(x)
     */
    static double linearInterpolation(double a, double b, double fa, double fb, double x);
};

#endif // RANDMATH_H
